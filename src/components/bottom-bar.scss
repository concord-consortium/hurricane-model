@import "common.scss";

$overflowHeight: 11px;

// Covers part of the border, just below the rounded corner.
%borderCover {
  content: '';
  display: block;
  position: absolute;
  height: $bottomBarHeight + $bottomBarBorderWidth;
  width: $bottomBarBorderWidth;
  bottom: 0;
  background: #fff;
}

.bottomBar {
  background: #fff;
  color: $controlLabel;
  height: $bottomBarHeight;
  display: flex;
  justify-content: space-between;
  border-top: $bottomBarBorderStyle;

  .leftContainer {
    position: relative;
    vertical-align: top;
    padding: 14px 10px 0 10px;
    .logo, .logoSmall {
      height: 38px;
    }
  }

  .mainContainer {
    display: flex;
  }

  // Base styles that ensure that given container sticks out from the bottom bar, has a nice, round corners and its border
  // matches rest of the bottom bar correctly.
  .widgetGroup {
    height: $bottomBarHeight + $overflowHeight;
    margin-top: -$overflowHeight;
    z-index: 1000;
    background: #fff;
    border-radius: 0;
    border-top: $bottomBarBorderStyle;
    border-top-left-radius: $bottomBarBorderRadius;
    border-top-right-radius: $bottomBarBorderRadius;
    position: relative;
    // Left border is necessary so the rounded corner looks good (otherwise, border would end in the middle of curve).
    border-left: $bottomBarBorderStyle;
    // However, it needs to be mostly covered.
    &:before {
      @extend %borderCover;
      left: -$bottomBarBorderWidth;
    }
    // Right border is necessary so the rounded corner looks good (otherwise, border would end in the middle of curve).
    border-right: $bottomBarBorderStyle;
    // However, it needs to be mostly covered.
    &:after {
      @extend %borderCover;
      right: -$bottomBarBorderWidth;
    }
    margin-left: -$bottomBarBorderWidth;
  }

  // Why global .hoverable?
  // It's being used by some child components to turn on initial hover effect.
  :global(.hoverable):hover {
    background: $hoverColor;
  }

  // for programmatic control of hover state
  .hovered {
    background: $hoverColor;
  }

  .reloadRestart {
    margin-left: 10px;
    white-space: nowrap;
  }

  .startStop {
    margin-right: 10px;
  }

  .fullscreenIcon {
    margin-right: 5px;
    margin-top: 5px;
    height: 50px;
    width: 50px;
    background-size: 100%;
    cursor: pointer;
    background-image: url("../assets/fullscreen.svg");
    &:hover {
      background-image: url("../assets/fullscreen-dark.svg");
    }
    &.fullscreen {
      background-image: url("../assets/fullscreen-exit.svg");
      &:hover {
        background-image: url("../assets/fullscreen-exit-dark.svg");
      }
    }
  }
}

.playbackButton {
  min-width: 60px;
  height: 100%;
  color: #434343;
  font-weight: bold;
  border-bottom-left-radius: 0 !important;
  border-bottom-right-radius: 0 !important;

  &:hover svg {
    box-shadow: 0 0 0 4px rgba(255,255,255,0.5);
  }
  &:active svg {
    box-shadow: 0 0 0 4px rgba(255,255,255,1);
  }

  &:first-child {
    border-top-left-radius: 10px;
  }
  &:last-child {
    border-top-right-radius: 10px;
  }
  svg {
    background: white;
    display: block;
    height: 30px;
    width: 30px;
    border-radius: 15px;
    margin: $bottomBarTopPadding auto 0 auto;
    path {
      fill: #797979;
    }
  }
}

@media (max-width: 960px) {
  .logo {
    display: none;
  }
}
@media (min-width: 960px) {
  .logoSmall {
    display: none;
  }
}
