import * as React from "react";
import { BaseComponent, IBaseProps } from "./base";
import Form, { ISubmitEvent } from "react-jsonschema-form";
import config from "../config";
import { JSONSchema6 } from "json-schema";
import * as css from "./authoring.scss";

interface IProps extends IBaseProps {}
interface IState { }
interface QueryParams {
  [key: string]: string;
}

const ignoreConfig = ["authoring"];

const keyTitleFormatter = ((key: string) => {
  const upperKey = key.charAt(0).toUpperCase() + key.slice(1);
  const parts = upperKey.match(/[A-Z][a-z]+|[0-9]+/g);
  let result = parts ? parts.join(" ") : key;
  result = result.replace("Sys ", "System ");
  result = result.replace("Sst ", "Sea Surface Temperature ");
  return result;
});

const customProperties: any = {
  season: {
    title: "Season",
    type: "string",
    enum: [
      "spring",
      "summer",
      "fall",
      "winter"
    ]
  },
  map: {
    title: "Base map",
    type: "string",
    enum: [
      "satellite",
      "street",
      "relief",
      "population"
    ]
  },
  initialBounds: {
    title: "Initial map bounds ([[lat1, lng2], [lat2, lng2]])",
    type: "string"
  },
  overlay: {
    title: "Overlay",
    type: "string",
    enum: [
      "sst",
      "precipitation",
      "stormSurge"
    ]
  },
  availableOverlays: {
    title: "Available Overlays",
    type: "array",
    items: {
      type: "string",
      enum: config.availableOverlays
    },
    uniqueItems: true
  }
};

const autoGeneratedSettings = () => {
  const configurableSettings: any = {};
  Object.keys(config).map(key => {
    if (ignoreConfig.indexOf(key) === -1 && customProperties[key] === undefined && typeof(config[key]) !== "object") {
      configurableSettings[key] = {
        title: keyTitleFormatter(key),
        type: typeof (config[key]),
        value: config[key]
      };
    }
  });
  return configurableSettings;
};

const schema: JSONSchema6 = {
  title: "Hurricane Model Parameters",
  type: "object",
  properties: {
    ...customProperties,
    ...autoGeneratedSettings()
  }
};

export const defaultAuthoring = {
  ...config
};

defaultAuthoring.initialBounds = JSON.stringify(config.initialBounds);

const uiSchema = {
  availableOverlays: {
    "ui:widget": "checkboxes"
  }
};

export class Authoring extends BaseComponent<IProps, IState> {
  public render() {
    return (
      <div className={css.authoring}>
        <Form
          schema={schema}
          formData={defaultAuthoring}
          uiSchema={uiSchema}
          onSubmit={this.onSubmit} />
      </div>
    );
  }

  public onSubmit = (e: ISubmitEvent<QueryParams>) => {
    const formValues: any = {};
    Object.keys(e.formData).forEach(key => {
      const newValue = e.formData[key];
      formValues[key] = e.formData[key];
      if (newValue.constructor === Array) {
        formValues[key] = JSON.stringify(newValue);
      }
    });
    const params = Object.keys(e.formData)
      .filter(key => {
        let defValue = config[key];
        if (defValue.constructor === Array) {
          defValue = JSON.stringify(defValue);
        }
        return formValues[key] !== defValue;
      })
      .map(key => {
        return encodeURIComponent(key) + "=" + encodeURIComponent(e.formData[key]);
      }).join("&");
    window.open(`${location.origin}${location.pathname}?${params}`, "_blank");
  }
}
